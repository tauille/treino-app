class GoogleConfig {
  // üîë Web Client ID do Google Cloud Console
  // IMPORTANTE: Substitua pelo seu Web Client ID real
  static const String webClientId = 'YOUR_WEB_CLIENT_ID.apps.googleusercontent.com';
  
  // üì± Android Client ID (opcional, para verifica√ß√µes extras)
  static const String androidClientId = 'YOUR_ANDROID_CLIENT_ID.apps.googleusercontent.com';
  
  // üçé iOS Client ID (opcional, para verifica√ß√µes extras)
  static const String iosClientId = 'YOUR_IOS_CLIENT_ID.apps.googleusercontent.com';
  
  // üîí Scopes necess√°rios
  static const List<String> scopes = [
    'email',
    'profile',
  ];
  
  // üåê URL de redirecionamento (para web)
  static const String redirectUrl = 'http://localhost:8000/auth/google/callback';
  
  // üõ†Ô∏è Configura√ß√µes de desenvolvimento
  static const bool enableDebugLogs = true;
  
  // üìã Instru√ß√µes de configura√ß√£o
  static const String setupInstructions = '''
üìã COMO CONFIGURAR GOOGLE SIGN IN:

1Ô∏è‚É£ V√° para Google Cloud Console:
   https://console.cloud.google.com/

2Ô∏è‚É£ Crie ou selecione um projeto

3Ô∏è‚É£ Ative a API Google+ API ou Google Sign-In API

4Ô∏è‚É£ V√° em "Credenciais" > "Criar credenciais" > "ID do cliente OAuth 2.0"

5Ô∏è‚É£ Configure os tipos de aplicativo:
   - Web application
   - Android
   - iOS (se necess√°rio)

6Ô∏è‚É£ Para WEB CLIENT ID:
   - Origens JavaScript autorizadas: http://localhost:8000
   - URIs de redirecionamento: http://localhost:8000/auth/google/callback

7Ô∏è‚É£ Para ANDROID:
   - Nome do pacote: com.example.treino_app (ou seu package name)
   - Impress√£o digital do certificado SHA-1:
     Execute: keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android

8Ô∏è‚É£ Copie o Web Client ID e cole em webClientId acima

9Ô∏è‚É£ Configure seu Laravel:
   - Adicione rota /api/auth/google
   - Valide token Google
   - Retorne token Sanctum

üîü Teste a integra√ß√£o!
  ''';
  
  // ‚úÖ Verificar se est√° configurado
  static bool get isConfigured {
    return webClientId.isNotEmpty && 
           webClientId != 'YOUR_WEB_CLIENT_ID.apps.googleusercontent.com';
  }
  
  // üîç Obter informa√ß√µes de configura√ß√£o
  static Map<String, dynamic> get configInfo {
    return {
      'web_client_id': webClientId,
      'android_client_id': androidClientId,
      'ios_client_id': iosClientId,
      'is_configured': isConfigured,
      'scopes': scopes,
      'redirect_url': redirectUrl,
      'debug_enabled': enableDebugLogs,
    };
  }
  
  // üìù Log de configura√ß√£o
  static void printConfigInfo() {
    if (enableDebugLogs) {
      print('üîß Google Config Info:');
      print('   Web Client ID: ${isConfigured ? 'Configurado ‚úÖ' : 'N√ÉO CONFIGURADO ‚ùå'}');
      print('   Scopes: ${scopes.join(', ')}');
      print('   Debug: $enableDebugLogs');
      
      if (!isConfigured) {
        print('‚ö†Ô∏è  ATEN√á√ÉO: Configure o Web Client ID!');
        print(setupInstructions);
      }
    }
  }
}